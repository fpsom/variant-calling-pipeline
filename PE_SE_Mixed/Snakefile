# workflow implementation with Snakemake based on DC Genomic lesson 

# SAMPLES= glob_wildcards("results/vcf/{SAMPLES}_final_variants_se.vcf")

import os 
from glob import glob
# pwd : ~/dc_workshop/my_workshop/
# mkdir <files> : data , results/bam , resuls/bcf , results/sam , results,bam
# the above files suggested to be empty
# ecoli should be in the <pwd> file 

rule all:
 	input :
 		"data/ecoli_rel606.fasta",
 		# "trimmed_fastq/SRR2584866",
 		# "trimmed_fastq/SRR2589044",
 		# "trimmed_fastq/SRR2584863"
		# "trimmed_fastq/SRR2584866_1un.trim.fastq.gz",
		# "trimmed_fastq/SRR2584866_2.trim.fastq.gz",
		# "trimmed_fastq/SRR2584866_2un.trim.fastq.gz",
		# "trimmed_fastq/SRR2584863_1.trim.fastq.gz",
		# "trimmed_fastq/SRR2584863_1un.trim.fastq.gz",
		# "trimmed_fastq/SRR2584863_2.trim.fastq.gz",
		# "trimmed_fastq/SRR2584863_2un.trim.fastq.gz",
		# "trimmed_fastq/SRR2589044_1.trim.fastq.gz",
		# "trimmed_fastq/SRR2589044_1un.trim.fastq.gz",
		# "trimmed_fastq/SRR2589044_2.trim.fastq.gz",
		# "trimmed_fastq/SRR2589044_2un.trim.fastq.gz",
		# "trimmed_fastq/SRR2584866_1.trim.fastq",
		# # "trimmed_fastq/SRR2584866_1un.trim.fastq",
		# "trimmed_fastq/SRR2584866_2.trim.fastq",
		# # "trimmed_fastq/SRR2584866_2un.trim.fastq",
		# "trimmed_fastq/SRR2584863_1.trim.fastq",
		# # "trimmed_fastq/SRR2584863_1un.trim.fastq",
		# "trimmed_fastq/SRR2584863_2.trim.fastq",
		# # "trimmed_fastq/SRR2584863_2un.trim.fastq",
		# "trimmed_fastq/SRR2589044_1.trim.fastq",
		# # "trimmed_fastq/SRR2589044_1un.trim.fastq",
		# "trimmed_fastq/SRR2589044_2.trim.fastq",
		# "trimmed_fastq/SRR2589044_2un.trim.fastq",
		# "results/bcf/SRR2589044_raw.bcf",
		# "results/bcf/SRR2584866_raw.bcf",
		# "results/bcf/SRR2584863_raw.bcf",
		# "results/sam/SRR2584863.aligned.sam",
		# "results/sam/SRR2584866.aligned.sam",
		# "results/sam/SRR2589044.aligned.sam"
		# "results/bam/SRR2584866.aligned.bam",
		# "results/bam/SRR2584863.aligned.bam",
		# "results/bam/SRR2589044.aligned.bam",     
		# "results/bam/SRR2584866.aligned.sorted.bam",
		# "results/bam/SRR2584863.aligned.sorted.bam",
		# "results/bam/SRR2589044.aligned.sorted.bam",
		"results/vcf/SRR2589044_final_variants.vcf",
		"results/vcf/SRR2584863_final_variants.vcf",
		"results/vcf/SRR2584866_final_variants.vcf"
rule indexing:                                     
	input: 
		gen="ecoli_rel606.fasta"
	output:
		indexed="data/ecoli_rel606.fasta" # problem with cyclic dependency,that's why should be in another folder 
	priority: 50
	shell:
		"bwa index {input.gen} > {output.indexed}"
rule trimming:
	input:
		lambda wildcards:glob('untrimmed_fastq/{SAMPLES}*.fastq.gz'.format(SAMPLES=wildcards.SAMPLES))
	output:
		 d=directory("trimmed_fastq/{SAMPLES}") # put a directory as output 
		# base="trimmed_fastq/{SAMPLES}_1.trim.fastq.qz_1P"  # trimmomatic will produce the name itself
	priority:40
	run:
		shell("mkdir -p {output.d}/PE")
		shell("mkdir -p {output.d}/SE")
		if len(input) > 1:
				shell("trimmomatic PE -basein {input[0]} -baseout {output.d}/{wildcards.SAMPLES}.trim.fastq \
						SLIDINGWINDOW:4:20 MINLEN:25 ILLUMINACLIP:NexteraPE-PE.fa:2:40:15")
		else:
				shell("trimmomatic SE {input[0]} {output.d}/{wildcards.SAMPLES}.trim.fastq \
						SLIDINGWINDOW:4:20 MINLEN:25 ILLUMINACLIP:NexteraPE-PE.fa:2:40:15") 
rule align_reads:
	input:
		d="trimmed_fastq/{SAMPLES}",
		gen="ecoli_rel606.fasta"	
	output:
		file="results/sam/{SAMPLES}.aligned.sam"
	priority:20
	run:
		files= next(os.walk(input.d))[2]
		# list = os.listdir(input.d)
		print(len(files))
		 # case of single end ----SE--files == 2
		if len(files)<3:
			shell("bwa mem {input.gen} {input.d}/{wildcards.SAMPLES}.trim.fastq > {output.file}")
		else:				# case of pair end 	 ----PE--files == 5 
			shell("bwa mem {input.gen} {input.d}/{wildcards.SAMPLES}.trim_1P.fastq {input.d}/{wildcards.SAMPLES}.trim_2P.fastq > {output.file}")
rule convert_to_sam:
	input:
		"results/sam/{SAMPLES}.aligned.sam"
	output:
		"results/bam/{SAMPLES}.aligned.bam"
	priority:10 #if len(files) < 3 :
	shell:
		"samtools view -S -b {input} > {output}"
# rule convert_to_sam_both:
# 	input:
# 		"results/sam/{SAMPLES}_pe.aligned.sam"
# 	output:
# 		"results/bam/{SAMPLES}_pe.aligned.bam"
# 	priority:10
# 	shell:
# 		"samtools view -S -b {input} > {output}"
rule sorting:
	input:
		"results/bam/{SAMPLES}.aligned.bam"
	output:
		"results/bam/{SAMPLES}.aligned.sorted.bam"
	priority:5
	shell:
		"samtools sort -o {output} {input}"
# rule sorting_both:
# 	input:
# 		"results/bam/{SAMPLES}.aligned.bam"
# 	output:
# 		"results/bam/{SAMPLES}.aligned.sorted.bam"
# 	priority:5
# 	shell:
# 		"samtools sort -o {output} {input}"
rule variant_calling_first_step:
	input:
		gen="ecoli_rel606.fasta",
		sort="results/bam/{SAMPLES}.aligned.sorted.bam"
	output:
		bcf="results/bcf/{SAMPLES}_raw.bcf"
	priority:4
	shell:
		"bcftools mpileup -O b -o {output.bcf} -f {input.gen} {input.sort}"
# rule variant_calling_first_step_both:
# 	input:
# 		gen="ecoli_rel606.fasta",
# 		sort="results/bam/{SAMPLES}_pe.aligned.sorted.bam"
# 	output:
# 		bcf="results/bcf/{SAMPLES}_raw_pe.bcf"
# 	priority:4
# 	shell:
# 		"bcftools mpileup -O b -o {output.bcf} -f {input.gen} {input.sort}"
rule detect_polymorphisms_single:
	input:
		bcf="results/bcf/{SAMPLES}_raw.bcf"
	output:
		variants="results/bcf/{SAMPLES}_variants.vcf"
	priority:3
	shell:
		"bcftools call --ploidy 1 -m -v -o {output.variants} {input.bcf}"
# rule detect_polymorphisms_both:
# 	input:
# 		bcf="results/bcf/{SAMPLES}_raw_pe.bcf"
# 	output:
# 		variants="results/bcf/{SAMPLES}_variants_pe.vcf"
# 	priority:3
# 	shell:
# 		"bcftools call --ploidy 1 -m -v -o {output.variants} {input.bcf}"
rule Filter_and_report_single:
	input:
		variants="results/bcf/{SAMPLES}_variants.vcf"
	output:
		f_variants="results/vcf/{SAMPLES}_final_variants.vcf"
	priority:2
	shell:										
		"vcfutils.pl varFilter {input.variants}  > {output.f_variants}"
# # rule Filter_and_report_both:
# # 	input:
# # 		variants="results/bcf/{SAMPLES}_variants_pe.vcf"
# # 	output:
# # 		f_variants="results/vcf/{SAMPLES}_final_variants_pe.vcf"
# # 	priority:2
# # 	shell:										
# # 		"vcfutils.pl varFilter {input.variants}  > {output.f_variants}"